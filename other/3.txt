
/////////////////////////////////////////////////////////////////////// A - Inception UVA - 13055

////////////////////////primera version
#include <iostream>
#include <stack>

int main(){
    std::stack<std::string> st; // stack of strings
    int n;
    std::cin >> n;
    std::string str, btr;
    while(n--){
        std::cin >> str;
        if(str == "Test"){
            if(!st.empty()) std::cout << st.top() << std::endl;
            else std::cout << "Not in a dream" << std::endl;
        }
        else if(str == "Sleep"){
            std::cin >> btr;
            st.push(btr);
        }
        else if(str == "Kick"){
            if(!st.empty()) st.pop();
        }
    }
    return 0;
}

////////////////////////segunda version recomendada
#include <iostream>
#include <stack>

void test(std::stack<std::string>& st) {
    if (!st.empty()) {
        std::cout << st.top() << std::endl;
    } else {
        std::cout << "Not in a dream" << std::endl;
    }
}

void sleep(std::stack<std::string>& st, const std::string& btr) {
    st.push(btr);
}

void kick(std::stack<std::string>& st) {
    if (!st.empty()) {
        st.pop();
    }
}

int main() {
    std::stack<std::string> st; // stack of strings
    int n;
    std::cin >> n;
    std::string str, btr;

    while (n--) {
        std::cin >> str;

        if (str == "Test") {
            test(st);
        } else if (str == "Sleep") {
            std::cin >> btr;
            sleep(st, btr);
        } else if (str == "Kick") {
            kick(st);
        }
    }

    return 0;
}


/////////////////////////////////////////////////////////////////////// B - Unique Factorization UVA - 10858

////////////////////////primera version
#include <iostream>
#include <vector>

typedef long long ll;

int k;
ll s;
std::vector<ll> v;
std::vector<std::vector<ll>> ans;

void recursion(ll n) {
    if (n <= 1) return;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            if (v.size() != 0 && v[v.size() - 1] > i) continue;
            v.push_back(i);
            recursion(n / i);
            v.push_back(s);
            ans.push_back(v);
            v.pop_back();
            v.pop_back();
        }
    }
    s = n;
}

int main() {
    ll n;
    while (std::cin >> n and n) {
        v.clear();
        k = 0;
        ans.clear();
        recursion(n);
        std::cout << ans.size() << std::endl;
        for (int i = 0; i < ans.size(); ++i) {
            for (int j = 0; j < ans[i].size(); ++j) {
                if (j) std::cout << " ";
                std::cout << ans[i][j];
            }
            std::cout << std::endl;
        }
    }
}

////////////////////////segunda version recomendada
#include <iostream>
#include <deque>

typedef long long ll;

int k;
ll s;
std::deque<ll> v;
std::deque<std::deque<ll>> ans;

void recursion(ll n) {
    if (n <= 1) return;
    for (int i = 2; i * i <= n; ++i) {
        if (n % i == 0) {
            if (!v.empty() && v.back() > i) continue;
            v.push_back(i);
            recursion(n / i);
            v.push_back(s);
            ans.push_back(v);
            v.pop_back();
            v.pop_back();
        }
    }
    s = n;
}

int main() {
    ll n;
    while (std::cin >> n && n) {
        v.clear();
        k = 0;
        ans.clear();
        recursion(n);
        std::cout << ans.size() << std::endl;
        for (int i = 0; i < ans.size(); ++i) {
            for (int j = 0; j < ans[i].size(); ++j) {
                if (j) std::cout << " ";
                std::cout << ans[i][j];
            }
            std::cout << std::endl;
        }
    }
}

/////////////////////////////////////////////////////////////////////// C - Parentheses Balance UVA - 673

////////////////////////primera version
#include <iostream>
#include <stack>

int main(){
    int n, i;
    std::cin >> n;
    std::cin.ignore();

    while(n > 0){
        std::string line;
        std::getline(std::cin, line);
        std::stack<char> stk;
        i = 0;
        while(line[i]){
            while(line[i] and (line[i] == '(' or line[i] == '[')) stk.push(line[i++]);
            if(!stk.empty() and line[i] == ')' and stk.top() == '(') stk.pop();
            else if(!stk.empty() and line[i] == ']' and stk.top() == '[') stk.pop();
            else break;
            ++i;
        }
        if(stk.empty() and line[i] == '\0') std::cout << "Yes\n";
        else std::cout << "No\n";
        --n;
    }
    return 0;
}

////////////////////////segunda version recomendada
#include <iostream>
#include <deque>
#include <string>

bool isBalanced(const std::string &line) {
    std::deque<char> dq;

    for (char c : line) {
        if (c == '(' || c == '[') {
            dq.push_back(c);
        } else if (c == ')' || c == ']') {
            if (dq.empty()) {
                return false;
            }
            char top = dq.back();
            if ((c == ')' && top == '(') || (c == ']' && top == '[')) {
                dq.pop_back();
            } else {
                return false;
            }
        }
    }

    return dq.empty();
}

int main() {
    int n;
    std::cin >> n;
    std::cin.ignore();

    while (n--) {
        std::string line;
        std::getline(std::cin, line);

        if (isBalanced(line)) {
            std::cout << "Yes\n";
        } else {
            std::cout << "No\n";
        }
    }

    return 0;
}


/////////////////////////////////////////////////////////////////////// D - Nesting a Bunch of Brackets UVA - 551

#include <bits/stdc++.h>

std::string corrige(std::string &st){
    std::string ans = "";
    st += " ";
    for (char &c : st) if(c == '/' or c == '\\') c = ' ';
    for (int i = 0; i < st.size()-1; i++) {
        if(st[i] == '(' and st[i+1] == '*') {
            ans += '/';
            i++;
        }
        else if(st[i] == '*' and st[i+1] == ')') {
            ans += '\\';
            i++;
        }
        else ans += st[i];
    }
    return ans;
}

void solve(std::string &st){
    std::map<char, char> contr;
    contr[']'] = '[';
    contr['\\'] = '/';
    contr['}'] = '{';
    contr['>'] = '<';
    contr[')'] = '(';

    std::stack<char> s;
    s.push('x');
    int ct = 0;
    for(int i = 0; i < st.size(); i++){
        char c = st[i];
        switch (c) {
            case '(': case '[': case '<': case '{': case '/':
                s.push(c);
                break;
            case ')': case ']': case '>': case '}': case '\\':
                char c2 = contr[c];
                if(s.top() != c2) {
                    std::cout << "NO " << i+1 << "\n"; return;
                }
                s.pop();
                break;
        }
    }
    if(s.size() != 1) std::cout << "NO " << st.size() + 1<< "\n";
    else std::cout << "YES\n";
}

int main(){
    std::string st;
    while(std::getline(std::cin, st)){
        st = corrige(st);
        solve(st);
    }
}

/////////////////////////////////////////////////////////////////////// A - Drutojan Express UVA - 11797

//////////////////////////////////primera version
#include <bits/stdc++.h>

char name[5][50] = {"Ja", "Sam", "Sha", "Sid", "Tan"};

void simulateGame(int m, int n, int now, std::vector<int> *lis, int *v) {
    int p[5] = {0}, ti = 0;

    while (true) {
        if (ti + m >= n) {
            v[now] += n - ti;
            break;
        } else if (ti + m + 2 >= n) {
            v[now] += m;
            break;
        }
        ti += m + 2;

        int tmp = now;
        v[now] += m;
        now = lis[now][p[now]];
        p[tmp] = (1 + p[tmp]) % lis[tmp].size();
    }
}

void printResults(int *v) {
    for (int i = 0; i < 5; i++)
        std::cout << name[i] << " " << v[i] << std::endl;
}

int main() {
    int t, c = 1;
    std::map<std::string, int> M;

    for (int i = 0; i < 5; ++i) {
        M[name[i]] = i;
    }

    std::cin >> t;

    while (t--) {
        int m, n, now;
        char in[100];
        std::cin >> m >> n >> in;
        now = M[in];
        std::vector<int> lis[5];

        for (int i = 0; i < 5; i++) {
            int k;
            std::cin >> k;
            for (int j = 0; j < k; j++) {
                std::cin >> in;
                lis[i].push_back(M[in]);
            }
        }

        std::cout << "Case " << c++ << ":" << std::endl;
        int v[5] = {0};
        simulateGame(m, n, now, lis, v);
        printResults(v);
    }

    return 0;
}

////////////////////////////////// segunda version recomendada
#include <bits/stdc++.h>

std::vector<std::string> name = {"Ja", "Sam", "Sha", "Sid", "Tan"};

void simulateGame(int m, int n, int now, std::vector<std::vector<int>>& lis, std::vector<int>& v) {
    std::vector<int> p(5, 0);
    int ti = 0;

    while (true) {
        if (ti + m >= n) {
            v[now] += n - ti;
            break;
        } else if (ti + m + 2 >= n) {
            v[now] += m;
            break;
        }
        ti += m + 2;

        int tmp = now;
        v[now] += m;
        now = lis[now][p[now]];
        p[tmp] = (1 + p[tmp]) % lis[tmp].size();
    }
}

void printResults(const std::vector<int>& v) {
    for (int i = 0; i < 5; i++)
        std::cout << name[i] << " " << v[i] << std::endl;
}

int main() {
    int t, c = 1;
    std::map<std::string, int> M;

    for (int i = 0; i < 5; ++i) {
        M[name[i]] = i;
    }

    std::cin >> t;

    while (t--) {
        int m, n, now;
        std::string in;
        std::cin >> m >> n >> in;
        now = M[in];
        std::vector<std::vector<int>> lis(5);

        for (int i = 0; i < 5; i++) {
            int k;
            std::cin >> k;
            for (int j = 0; j < k; j++) {
                std::cin >> in;
                lis[i].push_back(M[in]);
            }
        }

        std::cout << "Case " << c++ << ":" << std::endl;
        std::vector<int> v(5, 0);
        simulateGame(m, n, now, lis, v);
        printResults(v);
    }

    return 0;
}

/////////////////////////////////////////////////////////////////////// B - Extraordinarily Tired Students UVA - 12108

/////////////////////////////// primera version
#include <bits/stdc++.h>

int solveCase(std::vector<int>& a, std::vector<int>& b, std::vector<int>& c) {
    int n = a.size();
    int sleep = 0;

    for (int i = 0; i < n; ++i) {
        if (c[i] > a[i])
            sleep++;
    }

    int time = 1;

    if (sleep == 0) {
        return time;
    } else {
        while (time < 10000) {
            int flag = 0;
            for (int i = 0; i < n; ++i) {
                c[i]++;
                if (c[i] == a[i] + b[i] + 1) {
                    c[i] = 1;
                    flag--;
                } else if (c[i] == a[i] + 1) {
                    if (sleep > n - sleep)
                        flag++;
                    else
                        c[i] = 1;
                }
            }
            sleep += flag;
            time++;
            if (sleep <= 0) break;
        }
    }

    if (time == 10000) {
        return -1;
    } else {
        return time;
    }
}

int main() {
    int n;
    int index = 1;
    while (std::cin >> n && n) {
        std::vector<int> a(n), b(n), c(n);

        for (int i = 0; i < n; ++i) {
            std::cin >> a[i] >> b[i] >> c[i];
        }

        int result = solveCase(a, b, c);

        std::cout << "Case " << index++ << ": " << result << std::endl;
    }
    return 0;
}

/////////////////////////////// segunda version mejorada
#include <iostream>
#include <deque>

// Función que resuelve un caso individual
int solveCase(std::deque<int>& a, std::deque<int>& b, std::deque<int>& c) {
    int n = a.size();
    int sleep = 0;

    for (int i = 0; i < n; ++i) {
        if (c[i] > a[i])
            sleep++;
    }

    int time = 1;

    if (sleep == 0) {
        return time;
    } else {
        while (time < 10000) {
            int flag = 0;
            for (int i = 0; i < n; ++i) {
                c[i]++;
                if (c[i] == a[i] + b[i] + 1) {
                    c[i] = 1;
                    flag--;
                } else if (c[i] == a[i] + 1) {
                    if (sleep > n - sleep)
                        flag++;
                    else
                        c[i] = 1;
                }
            }
            sleep += flag;
            time++;
            if (sleep <= 0) break;
        }
    }

    if (time == 10000) {
        return -1;
    } else {
        return time;
    }
}

// Función que procesa múltiples casos
void processCases() {
    int n;
    int index = 1;
    while (std::cin >> n && n) {
        std::deque<int> a(n), b(n), c(n);

        for (int i = 0; i < n; ++i) {
            std::cin >> a[i] >> b[i] >> c[i];
        }

        int result = solveCase(a, b, c);

        std::cout << "Case " << index++ << ": " << result << std::endl;
    }
}

int main() {
    processCases();
    return 0;
}


/////////////////////////////////////////////////////////////////////// C - Team Queue UVA - 540

////////////////////////////////// primera version
#include <bits/stdc++.h>

void solve(int t) {
    std::vector<std::queue<int>> indivQ(t);
    std::queue<int> teamQ;
    std::unordered_map<int, int> team;

    for (int i = 0; i < t; ++i) {
        int teamSize;
        std::cin >> teamSize;
        for (int j = 0; j < teamSize; ++j) {
            int tmp;
            std::cin >> tmp;
            team[tmp] = i;
        }
    }

    std::string cmd;
    while (std::cin >> cmd && cmd != "STOP") {
        if (cmd == "ENQUEUE") {
            int elem;
            std::cin >> elem;
            int teamIndex = team[elem];
            indivQ[teamIndex].push(elem);
            if (indivQ[teamIndex].size() == 1) teamQ.push(teamIndex);
        } else if (cmd == "DEQUEUE") {
            int frontTeam = teamQ.front();
            std::cout << indivQ[frontTeam].front() << '\n';
            indivQ[frontTeam].pop();
            if (indivQ[frontTeam].empty()) teamQ.pop();
        }
    }
}

int main() {
    int n = 0, t;
    while (std::cin >> t && t != 0) {
        std::cout << "Scenario #" << n + 1 << '\n';
        n++;
        solve(t);
        std::cout << '\n';
    }
    return 0;
}

//////////////////////////////// segunda version recomendada
#include <bits/stdc++.h>

std::map<int, int> team;
std::set<int> enteredQ;
std::queue<int> teamQ;
std::vector<std::queue<int>> indivQ;

void initialize(int t) {
    team.clear();
    enteredQ.clear();
    teamQ = std::queue<int>();
    indivQ = std::vector<std::queue<int>>(t);
}

void processENQUEUE(int elem) {
    int teamIndex = team[elem];
    if (enteredQ.find(teamIndex) == enteredQ.end()) {
        enteredQ.insert(teamIndex);
        teamQ.push(teamIndex);
        indivQ[teamIndex].push(elem);
    } else {
        indivQ[teamIndex].push(elem);
    }
}

void processDEQUEUE() {
    int frontTeam = teamQ.front();
    std::cout << indivQ[frontTeam].front() << '\n';
    indivQ[frontTeam].pop();
    if (indivQ[frontTeam].empty()) {
        teamQ.pop();
        enteredQ.erase(frontTeam);
    }
}

void solve(int t) {
    initialize(t);

    for (int i = 0; i < t; ++i) {
        int teamSize;
        std::cin >> teamSize;
        int tmp;
        for (int j = 0; j < teamSize; ++j) {
            std::cin >> tmp;
            team[tmp] = i;
        }
    }

    std::string cmd;
    int elem;
    while (std::cin >> cmd && cmd != "STOP") {
        if (cmd == "ENQUEUE") {
            std::cin >> elem;
            processENQUEUE(elem);
        } else if (cmd == "DEQUEUE") {
            processDEQUEUE();
        }
    }
}

int main() {
    int n = 0, t;
    while (std::cin >> t && t != 0) {
        std::cout << "Scenario #" << n + 1 << '\n';
        n++;
        solve(t);
        std::cout << '\n';
    }
}


//////////////////////////////// tercera version recomendada
#include <bits/stdc++.h>

std::map<int, int> assignTeams(int t) {
    std::map<int, int> team;
    for (int i = 0; i < t; ++i) {
        int teamSize;
        std::cin >> teamSize;
        int tmp;
        for (int j = 0; j < teamSize; ++j) {
            std::cin >> tmp;
            team[tmp] = i;
        }
    }
    return team;
}

void processCommands(const std::map<int, int>& team) {
    std::set<int> enteredQ;
    std::queue<int> teamQ;
    std::vector<std::queue<int>> indivQ(team.size());

    std::string cmd;
    int elem;
    while (std::cin >> cmd && cmd != "STOP") {
        if (cmd == "ENQUEUE") {
            std::cin >> elem;
            if (enteredQ.find(team.at(elem)) == enteredQ.end()) {
                enteredQ.insert(team.at(elem));
                teamQ.push(team.at(elem));
                indivQ[team.at(elem)].push(elem);
            } else {
                indivQ[team.at(elem)].push(elem);
            }
        } else if (cmd == "DEQUEUE") {
            int fronTeam = teamQ.front();
            std::cout << indivQ[fronTeam].front() << '\n';
            indivQ[fronTeam].pop();
            if (indivQ[fronTeam].empty()) {
                teamQ.pop();
                enteredQ.erase(fronTeam);
            }
        }
    }
}

void solveScenario(int n) {
    int t;
    while (std::cin >> t && t != 0) {
        std::cout << "Scenario #" << n + 1 << '\n';
        std::map<int, int> team = assignTeams(t);
        processCommands(team);
        std::cout << '\n';
        n++;
    }
}

int main() {
    int n = 0;
    solveScenario(n);
    return 0;
}

/////////////////////////////////////////////////////////////////////// A - Password Search 902

//////////////////////////// primera version
#include <bits/stdc++.h>

void solve(int n, std::string s){
    std::map<std::string, int> m;
    for (int i = 0; i < s.size() - n + 1; ++i) {
        std::string sub_s_actual = s.substr(i, n);
        if(m.count(sub_s_actual) <= 0)
            m.insert(std::pair<std::string, int>(sub_s_actual, 1));
        else if(m.count(sub_s_actual) > 0) m[sub_s_actual]++;
    }
    int max = 0;
    for(auto & it : m)
        if(it.second > max)
            max = it.second;

    for (auto & it : m)
        if(it.second == max)
            std::cout << it.first;
    std::cout << std::endl;
}

int main(){
    int n;
    std::string s;
    while(std::cin >> n>> s)
        solve(n, s);
}

/////////////////////////// segunda version recomendada
#include <bits/stdc++.h>

void solve(int n, std::string s) {
    std::unordered_map<std::string, int> m;
    for (int i = 0; i < s.size() - n + 1; ++i) {
        std::string sub_s_actual = s.substr(i, n);
        if (m.find(sub_s_actual) == m.end())
            m.insert(std::pair<std::string, int>(sub_s_actual, 1));
        else
            m[sub_s_actual]++;
    }
    int max = 0;
    for (const auto &it : m) {
        if (it.second > max)
            max = it.second;
    }

    for (const auto &it : m) {
        if (it.second == max)
            std::cout << it.first;
    }
    std::cout << std::endl;
}

int main() {
    int n;
    std::string s;
    while (std::cin >> n >> s)
        solve(n, s);
}


/////////////////////////////////////////////////////////////////////// B - Exhibition UVA - 11348

/////////////////////////////// primera version
#include <bits/stdc++.h>

// calculo de porcentajes
void calculate(int k, int n, const std::vector<int>& counts) {
    int all = 0;
    for (int count : counts) all += count;

    std::cout << "Case " << k << ": ";
    if (all > 0) {
        for (int i = 0; i < n - 1; ++i)
            std::cout << std::fixed << std::setprecision(6) << (static_cast<double>(counts[i]) / all * 100) << "% ";
        std::cout << std::fixed << std::setprecision(6) << (static_cast<double>(counts[n - 1]) / all * 100) << "%" << std::endl;
    } else std::cout << std::endl;
}

int main() {
    int casee;
    std::cin >> casee;

    for (int k = 1; k <= casee; k++) {
        int n, m, x;
        std::cin >> n;
        std::map<int, int> TOid;
        std::vector<int> count(n, 0);

        for (int i = 0; i < n; i++) {
            std::cin >> m;

            while (m--) {
                std::cin >> x;

                if (TOid.count(x) == 0) {
                    count[i]++;
                    TOid[x] = i;
                } else if (TOid[x] >= 0 and TOid[x] != i) {
                    count[TOid[x]]--;
                    TOid[x] = -1;
                }
            }
        }
        calculate(k, n, count);
    }

    return 0;
}

/////////////////////////////// segunda versiona recomendada
#include <bits/stdc++.h>

// Calcula y muestra los porcentajes
void calculatePercentages(int k, int n, const std::vector<int>& counts) {
    int total = 0;
    for (int count : counts) {
        total += count;
    }

    std::cout << "Case " << k << ": ";
    if (total > 0) {
        for (int i = 0; i < n - 1; ++i) {
            double percentage = static_cast<double>(counts[i]) / total * 100;
            std::cout << std::fixed << std::setprecision(6) << percentage << "% ";
        }
        double lastPercentage = static_cast<double>(counts[n - 1]) / total * 100;
        std::cout << std::fixed << std::setprecision(6) << lastPercentage << "%" << std::endl;
    } else {
        std::cout << std::endl;
    }
}

// Procesa cada caso
void processCase(int k) {
    int n, m, x;
    std::cin >> n;
    std::map<int, int> TOid;
    std::vector<int> count(n, 0);

    for (int i = 0; i < n; i++) {
        std::cin >> m;
        while (m--) {
            std::cin >> x;

            if (TOid.count(x) == 0) {
                count[i]++;
                TOid[x] = i;
            } else if (TOid[x] >= 0 && TOid[x] != i) {
                count[TOid[x]]--;
                TOid[x] = -1;
            }
        }
    }
    calculatePercentages(k, n, count);
}

int main() {
    int caseCount;
    std::cin >> caseCount;

    for (int k = 1; k <= caseCount; k++) {
        processCase(k);
    }

    return 0;
}

/////////////////////////////////////////////////////////////////////// C - Ballot evaluation UVA - 11629

////////////////////////////primera version
#include <bits/stdc++.h>

// datos
void ReadData(std::map<std::string, int>& m, int& n, int& q) {
    std::cin >> n >> q;
    while (n--) {
        std::string s;
        int integer, digit;
        char point;
        std::cin >> s >> integer >> point >> digit >> std::ws;
        m[s] = integer * 10 + digit;
    }
}

// evauar suposiciones
void EvaluateGuesses(const std::map<std::string, int>& m, int q) {
    for (int i = 1; i <= q; ++i) {
        std::string line;
        std::getline(std::cin, line);
        std::istringstream in(line);
        int right, left = 0;
        std::string s, op;

        while (in >> s >> op && op == "+")
            left += m.at(s);
        left += m.at(s);

        in >> right;
        right *= 10;

        if (op.find('=') != std::string::npos && left == right)
            std::cout << "Guess #" << i << " was correct.\n";
        else if (op.find('>') != std::string::npos && left > right)
            std::cout << "Guess #" << i << " was correct.\n";
        else if (op.find('<') != std::string::npos && left < right)
            std::cout << "Guess #" << i << " was correct.\n";
        else
            std::cout << "Guess #" << i << " was incorrect.\n";
    }
}

int main() {
    std::map<std::string, int> m;
    int n, q;

    ReadData(m, n, q);
    EvaluateGuesses(m, q);

    return 0;
}

////////////////////////////// segunda version recomendada
#include <bits/stdc++.h>

// Leer datos de entrada
void ReadData(std::unordered_map<std::string, int>& m, int& n, int& q) {
    std::cin >> n >> q;
    while (n--) {
        std::string s;
        int integer, digit;
        char point;
        std::cin >> s >> integer >> point >> digit >> std::ws;
        m[s] = integer * 10 + digit;
    }
}

// Evaluar una suposición individual
bool EvaluateGuess(const std::unordered_map<std::string, int>& m, const std::string& guess) {
    std::istringstream in(guess);
    int right, left = 0;
    std::string s, op;

    while (in >> s >> op && op == "+")
        left += m.at(s);
    left += m.at(s);

    in >> right;
    right *= 10;

    if (op.find('=') != std::string::npos && left == right)
        return true;
    else if (op.find('>') != std::string::npos && left > right)
        return true;
    else if (op.find('<') != std::string::npos && left < right)
        return true;

    return false;
}

// Procesar y evaluar todas las suposiciones
void ProcessGuesses(const std::unordered_map<std::string, int>& m, int q) {
    for (int i = 1; i <= q; ++i) {
        std::string guess;
        std::getline(std::cin, guess);

        if (EvaluateGuess(m, guess))
            std::cout << "Guess #" << i << " was correct.\n";
        else
            std::cout << "Guess #" << i << " was incorrect.\n";
    }
}

int main() {
    std::unordered_map<std::string, int> m;
    int n, q;

    ReadData(m, n, q);
    ProcessGuesses(m, q);

    return 0;
}