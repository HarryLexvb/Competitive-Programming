///////////////////////////////////////////////////////////////////////////////////////// Coin Change UVA - 674
#include <bits/stdc++.h>
using namespace std;

void solve(int n) {
    int coins[] = {1, 5, 10, 25, 50};
    int dp[n+1];
    memset(dp, 0, sizeof(dp));
    dp[0] = 1;
    for (int i = 0; i < 5; i++) {
        for (int j = coins[i]; j <= n; j++) {
            dp[j] += dp[j-coins[i]];
        }
    }
    cout << dp[n] << endl;
}

int main() {
    int n;
    while (cin >> n) {
        solve(n);
    }
}

///////////////////////////////////////////////////////////////////////////////////////// Cutting Sticks UVA - 10003
#include <bits/stdc++.h>
using namespace std;

int main() {
    int l, n;
    while (cin >> l && l) {
        cin >> n;
        vector<int> v(n + 2);
        v[0] = 0;
        v[n + 1] = l;
        for (int i = 1; i <= n; i++) {
            cin >> v[i];
        }
        vector<vector<int>> dp(n + 2, vector<int>(n + 2, 0));
        for (int i = 2; i <= n + 1; i++) {
            for (int j = 0; j <= n + 1 - i; j++) {
                int minn = INT_MAX;
                for (int k = j + 1; k < j + i; k++) {
                    minn = min(minn, dp[j][k] + dp[k][j + i]);
                }
                dp[j][j + i] = minn + v[j + i] - v[j];
            }
        }
        cout << "The minimum cutting is " << dp[0][n + 1] << ".\n";
    }
    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////// Rare Order UVA - 200
#include <bits/stdc++.h>
using namespace std;

vector<int> adj[26];
bool visited[26];
stack<int> st;

void dfs(int u) {
    visited[u] = true;
    for (int i = 0; i < adj[u].size(); i++) {
        int v = adj[u][i];
        if (!visited[v]) {
            dfs(v);
        }
    }
    st.push(u);
}

int main() {
    string s;
    vector<string> v;
    while (cin >> s) {
        if (s == "#") break;
        v.push_back(s);
    }
    for (int i = 0; i < v.size() - 1; i++) {
        string s1 = v[i];
        string s2 = v[i + 1];
        int j = 0;
        while (j < s1.size() && j < s2.size()) {
            if (s1[j] != s2[j]) {
                adj[s1[j] - 'A'].push_back(s2[j] - 'A');
                break;
            }
            j++;
        }
    }
    for (int i = 0; i < 26; i++) {
        if (!visited[i]) {
            dfs(i);
        }
    }
    while (!st.empty()) {
        cout << char(st.top() + 'A');
        st.pop();
    }
    cout << endl;
    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////// Bicoloring UVA - 10004
#include <bits/stdc++.h>
using namespace std;

bool bfs(vector<int> adj[], int n, int src)
{
    vector<int> color(n, -1);
    queue<int> q;
    q.push(src);
    color[src] = 1;
    while (!q.empty())
    {
        int u = q.front();
        q.pop();
        for (auto v : adj[u])
        {
            if (color[v] == -1)
            {
                color[v] = 1 - color[u];
                q.push(v);
            }
            else if (color[v] == color[u])
                return false;
        }
    }
    return true;
}

int main()
{
    int n, l;
    while (cin >> n && n)
    {
        cin >> l;
        vector<int> adj[n];
        for (int i = 0; i < l; i++)
        {
            int u, v;
            cin >> u >> v;
            adj[u].push_back(v);
            adj[v].push_back(u);
        }
        if (bfs(adj, n, 0))
            cout << "BICOLORABLE." << endl;
        else
            cout << "NOT BICOLORABLE." << endl;
    }
    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////// Frogger UVA - 534
#include <bits/stdc++.h>

using namespace std;

const int MAX = 205;
const double INF = 1e9;

typedef pair<int, int> ii;
typedef pair<double, ii> dii;

int n;
int x[MAX], y[MAX];
double dist[MAX][MAX];

double euclidean(int i, int j) {
    return sqrt(pow(x[i] - x[j], 2) + pow(y[i] - y[j], 2));
}

void floyd_warshall() {
    for(int i = 0; i < n; i++) {
        dist[i][i] = 0;
        for(int j = i + 1; j < n; j++) {
            dist[i][j] = dist[j][i] = euclidean(i, j);
        }
    }

    for(int k = 0; k < n; k++) {
        for(int i = 0; i < n; i++) {
            if(dist[i][k] == INF) continue;
            for(int j = 0; j < n; j++) {
                if(dist[k][j] == INF) continue;
                dist[i][j] = min(dist[i][j], max(dist[i][k], dist[k][j]));
            }
        }
    }
}

int main() {
    int t = 1;
    while(cin >> n, n) {
        for(int i = 0; i < n; i++) {
            cin >> x[i] >> y[i];
        }

        for(int i = 0; i < n; i++) {
            for(int j = 0; j < n; j++) {
                dist[i][j] = INF;
            }
        }

        floyd_warshall();

        cout << "Scenario #" << t++ << "\n";
        cout << "Frog Distance = " << fixed << setprecision(3) << dist[0][1] << "\n\n";
    }
    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////// Parity UVA - 10931
#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    while (cin >> n && n) {
        int cnt = 0;
        string s = "";
        while (n) {
            s += (n % 2) + '0';
            cnt += n % 2;
            n /= 2;
        }
        reverse(s.begin(), s.end());
        cout << "The parity of " << s << " is " << cnt << " (mod 2).\n";
    }
    return 0;
}

///////////////////////////////////////////////////////////////////////////////////////// What Base Is This? UVA - 343
#include <bits/stdc++.h>
using namespace std;

void solve(string a, string b){
    int b_start = 0;
    for(auto m : b){
        b_start = max(b_start, m >= 'A' ? m - 'A' + 10 : m - '0');
    }

    vector<pair<int, long long>> b_base;
    for(int i = b_start + 1 == 1 ? 2 : b_start + 1; i <= 36; i++){
        long long num = 0;
        for(int j = 0; b[j]; j++){
            num += pow(i, (int)b.size()-j-1) * (b[j] >= 'A' ? b[j] - 'A' + 10 : b[j] - '0');
        }
        b_base.emplace_back(i, num);
    }

    int a_start = 0;
    for(auto m : a){
        a_start = max(a_start, m >= 'A' ? m - 'A' + 10 : m - '0');
    }

    for(int i = a_start +1 == 1 ? 2 : a_start + 1; i <= 36; i++){
        long long num = 0;
        for(int j = 0; a[j]; j++){
            num += pow(i, (int)a.size()-j-1) * (a[j] >= 'A' ? a[j] - 'A' + 10 : a[j] - '0');
        }
        for(auto m : b_base){
            if(num == m.second){
                cout << a << " (base " << i << ") = " << b << " (base " << m.first << ")\n";
                return;
            }
        }
    }
    cout << a << " is not equal to " << b << " in any base 2..36\n";
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(0);
    string a, b;
    while(cin >> a >> b){
        solve(a, b);
    }
}

///////////////////////////////////////////////////////////////////////////////////////// Count on Cantor UVA - 264
#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    while(cin >> n){
        int a = 1, b = 1;
        int x = 0, z = 0;
        while(a < n){
            b++;
            a += b;
        }
        x = a - n + 1;
        z = b - x + 1;
        cout << "TERM " << n << " IS ";
        if(b % 2) cout << x << "/" << z << endl;
        else cout << z << "/" << x << endl;
    }
}